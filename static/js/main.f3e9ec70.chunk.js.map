{"version":3,"sources":["storage/storage.js","components/board-box.js","utils/functions.js","components/board.js","components/scoreboard.js","index.js"],"names":["Storage","storageName","initialValue","this","localStorage","getItem","setItem","JSON","parse","data","stringify","Box","props","className","onClick","value","findWinner","boxes","rows","i","length","a","b","c","areAllBoxesClicked","count","forEach","item","Board","storage","handleBoardRestart","setState","Array","fill","history","xIsNext","state","index","slice","utils","push","status","winner","isFilled","update","to","handleBoxClick","map","move","key","React","Component","Scoreboard","scoreboard","getData","leader","App","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f3e9ec70.chunk.js","sourcesContent":["export class Storage {\r\n    constructor(storageName = 'gameScoreboard', initialValue = '[]') {\r\n      this.storageName = storageName\r\n  \r\n          // Check if localStorage contains any data from previous games\r\n      if (!localStorage.getItem(storageName)) {\r\n              // If not, create new item for our Tic Tac Toe game\r\n        localStorage.setItem(storageName, initialValue)\r\n      }\r\n    }\r\n  \r\n      // Load data from previous games from localStorage\r\n    getData() {\r\n      return JSON.parse(localStorage.getItem(this.storageName))\r\n    }\r\n  \r\n      // Update data in localStorage\r\n    update(data) {\r\n      localStorage.setItem(this.storageName, JSON.stringify(data))\r\n    }\r\n  }","import React from 'react'\r\n\r\n// Create Box component\r\nexport const Box = (props) => {\r\n    return (\r\n        <button className=\"board__box\" onClick={props.onClick}>\r\n            {props.value}\r\n        </button>\r\n    )\r\n}","export function findWinner(boxes) {\r\n    // Array with winning combinations\r\n    const rows = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6]\r\n    ]\r\n\r\n    // Iterate over array with winning combinations\r\n    for (let i = 0; i < rows.length; i++) {\r\n        const [a, b, c] = rows[i]\r\n\r\n        // Check if the game board contains winning combination\r\n        if (boxes[a] && boxes[a] === boxes[b] && boxes[a] === boxes[c]) {\r\n            // Return the winner ('x' or 'o')\r\n            return boxes[a]\r\n        }\r\n    }\r\n\r\n    // Otherwise do nothing\r\n    return null\r\n}\r\n\r\nexport function areAllBoxesClicked(boxes) {\r\n    // Declare variable to store number of clicked boxes.\r\n    let count = 0\r\n\r\n    // Iterate over all boxes\r\n    boxes.forEach(function (item) {\r\n        // Check if box is clicked (not null)\r\n        if (item !== null) {\r\n            // If yes, increase the value of count by 1\r\n            count++\r\n        }\r\n    })\r\n\r\n    // Check if all boxes are clicked (filled)\r\n    if (count === 9) {\r\n        return true\r\n    } else {\r\n        return false\r\n    }\r\n}","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\n// Import Storage object\r\nimport { Storage } from './../storage/storage'\r\n\r\n// Import Box component\r\nimport { Box } from './board-box'\r\n\r\n// Import utility functions\r\nimport * as utils from '../utils/functions'\r\n\r\n// Create Board component\r\nexport class Board extends React.Component {\r\n    constructor(props) {\r\n    super(props)\r\n\r\n        // Initialize component state\r\n        this.state = {\r\n            boxes: Array(9).fill(null),\r\n            history: [],\r\n            xIsNext: true\r\n        }\r\n    }\r\n\r\n    // Create instance of Storage object\r\n    storage = new Storage()\r\n\r\n    // Handle click on boxes on the board.\r\n    handleBoxClick(index) {\r\n        // get current state of boxes\r\n        const boxes = this.state.boxes.slice()\r\n\r\n        // Get current state of history\r\n        let history = this.state.history\r\n\r\n        // Stop the game if board contains winning combination\r\n        if (utils.findWinner(boxes) || boxes[index]) {\r\n            return\r\n        }\r\n\r\n        // Stop the game if all boxes are clicked (filled)\r\n        if(utils.areAllBoxesClicked(boxes) === true) {\r\n            return\r\n        }\r\n\r\n        // Mark the box either as 'x' or 'o'\r\n        boxes[index] = this.state.xIsNext ? 'x' : 'o'\r\n\r\n        // Add move to game history\r\n        history.push(this.state.xIsNext ? 'x' : 'o')\r\n\r\n        // Update component state with new data\r\n    this.setState({\r\n            boxes: boxes,\r\n            history: history,\r\n            xIsNext: !this.state.xIsNext\r\n        })\r\n    }\r\n\r\n    // Handle board restart - set component state to initial state\r\n    handleBoardRestart = () => {\r\n        this.setState({\r\n            boxes: Array(9).fill(null),\r\n            history: [],\r\n            xIsNext: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        // Get winner (if there is any)\r\n    const winner = utils.findWinner(this.state.boxes)\r\n\r\n        // Are all boxes checked?\r\n    const isFilled = utils.areAllBoxesClicked(this.state.boxes)\r\n\r\n        // Status message\r\n    let status\r\n\r\n        if (winner) {\r\n            // If winner exists, create status message\r\n            status = `The winner is: ${winner}!`\r\n\r\n            // Push data about the game to storage\r\n            this.storage.update([`${winner} won`])\r\n        } else if(!winner && isFilled) {\r\n            // If game is drawn, create status message\r\n            status = 'Game drawn!'\r\n\r\n            // Push data about the game to storage\r\n            this.storage.update(['Game drawn'])\r\n        } else {\r\n            // If there is no winner and game is not drawn, ask the next player to make a move\r\n            status = `It is ${(this.state.xIsNext ? 'x' : 'o')}'s turn.`\r\n        }\r\n\r\n        return (\r\n            <>\r\n                {/* Link to scoreboard */}\r\n                <Link to=\"/tic-tac-toe\" className=\"board-link\">Go back to scoreboard</Link>\r\n\r\n                {/* The game board */}\r\n                <div className=\"board-wrapper\">\r\n                    <div className=\"board\">\r\n                        <h2 className=\"board-heading\">{status}</h2>\r\n\r\n                        <div className=\"board-row\">\r\n                            <Box value={this.state.boxes[0]} onClick={() => this.handleBoxClick(0)} />\r\n\r\n                            <Box value={this.state.boxes[1]} onClick={() => this.handleBoxClick(1)} />\r\n\r\n                            <Box value={this.state.boxes[2]} onClick={() => this.handleBoxClick(2)} />\r\n                        </div>\r\n\r\n                        <div className=\"board-row\">\r\n                            <Box value={this.state.boxes[3]} onClick={() => this.handleBoxClick(3)} />\r\n\r\n                            <Box value={this.state.boxes[4]} onClick={() => this.handleBoxClick(4)} />\r\n\r\n                            <Box value={this.state.boxes[5]} onClick={() => this.handleBoxClick(5)} />\r\n                        </div>\r\n\r\n                        <div className=\"board-row\">\r\n                            <Box value={this.state.boxes[6]} onClick={() => this.handleBoxClick(6)} />\r\n\r\n                            <Box value={this.state.boxes[7]} onClick={() => this.handleBoxClick(7)} />\r\n\r\n                            <Box value={this.state.boxes[8]} onClick={() => this.handleBoxClick(8)} />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"board-history\">\r\n                        <h2 className=\"board-heading\">Moves history:</h2>\r\n\r\n                        {/* List with history of moves */}\r\n                        <ul className=\"board-historyList\">\r\n                            {this.state.history.length === 0 && <span>No moves to show.</span>}\r\n\r\n                            {this.state.history.length !== 0 && this.state.history.map((move, index) => {\r\n                                return <li key={index}>Move {index + 1}: <strong>{move}</strong></li>\r\n                            })}\r\n                        </ul>\r\n                    </div>\r\n\r\n                    {/* Button to start new game */}\r\n                    {winner && <div className=\"board-footer\">\r\n                        <button className=\"btn\" onClick={this.handleBoardRestart}>Start new game</button>\r\n                    </div>}\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\n// Import Storage object\r\nimport { Storage } from './../storage/storage'\r\n\r\n// Create Scoreboard component\r\nexport class Scoreboard extends React.Component {\r\n  state = {\r\n    scoreboard: []\r\n  }\r\n\r\n    // After component mounts, load any data from local storage and update component state\r\n  async componentDidMount() {\r\n    let storage = await new Storage().getData()\r\n\r\n    this.setState({\r\n      scoreboard: storage\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"game\">\r\n        <h1>Recent games:</h1>\r\n\r\n                {/* List with previous games */}\r\n        <ul>\r\n          {this.state.scoreboard.map((leader, key) => {\r\n            return <li key={key}>{leader}</li>\r\n          })}\r\n        </ul>\r\n\r\n                {/* Link to start new game */}\r\n        <Link to=\"/board\">\r\n          <button className=\"btn\">Start new game</button>\r\n        </Link>\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter, Route } from 'react-router-dom'\n\n// Import Board and Scoreboard views\nimport { Board } from './components/board'\nimport { Scoreboard } from './components/scoreboard'\n\nimport './styles/board.css'\nimport './styles/box.css'\nimport './styles/buttons.css'\n\n// Create App component\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div className=\"app\">\n                <BrowserRouter>\n                    <Route exact path= \"/tic-tac-toe\" component={Scoreboard} />\n                    <Route path = \"/board\" component={Board} />                    \n                </BrowserRouter>\n            </div>\n        )\n    }\n}\n\n// Render the App component into DOM\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}